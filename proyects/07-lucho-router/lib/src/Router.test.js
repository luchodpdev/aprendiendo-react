import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from"react/jsx-runtime";import{describe,it,expect,beforeEach,vi}from"vitest";import{cleanup,fireEvent,render,screen}from"@testing-library/react";import{Router}from"./Router";import{getCurrentPath}from"./utils";import{Link}from"./Link";import{Route}from"./Route";vi.mock("./utils.js",()=>({getCurrentPath:vi.fn()}));describe("Router",()=>{beforeEach(()=>{cleanup();vi.clearAllMocks()});it("should render without problems",()=>{render(/*#__PURE__*/_jsx(Router,{routes:[]}));expect(true).toBeTruthy()});it("Should render 404 if no routes match",()=>{render(/*#__PURE__*/_jsx(Router,{routes:[],defaultComponent:()=>/*#__PURE__*/_jsx("h1",{children:"404"})}));expect(screen.getByText("404")).toBeTruthy()});it("Should render the component of the fisrt route that matches",()=>{getCurrentPath.mockReturnValue("/about");const routes=[{path:"/",Component:()=>/*#__PURE__*/_jsx("h1",{children:"Home"})},{path:"/about",Component:()=>/*#__PURE__*/_jsx("h1",{children:"About"})}];render(/*#__PURE__*/_jsx(Router,{routes:routes}));expect(screen.getByText("About")).toBeTruthy()});it("Should navigate using link",async()=>{getCurrentPath.mockReturnValueOnce("/");render(/*#__PURE__*/_jsxs(Router,{children:[/*#__PURE__*/_jsx(Route,{path:"/",Component:()=>{return /*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx("h1",{children:"Home"}),/*#__PURE__*/_jsx(Link,{to:"/about",children:"Go to About"})]})}}),/*#__PURE__*/_jsx(Route,{path:"/about",Component:()=>/*#__PURE__*/_jsx("h1",{children:"About"})})]}));const button=screen.getByText(/Go to About/);fireEvent.click(button);const aboutTitle=await screen.findByText("About");expect(aboutTitle).toBeTruthy()})});